version: "3.5"

services:
  jaeger:
    image: jaegertracing/all-in-one:1.52
    command: --query.ui-config=/etc/jaeger/jaeger-ui.json --collector.otlp.enabled=true --prometheus.server-url=http://prometheus:9090 --prometheus.query.support-spanmetrics-connector=true
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    volumes:
      - ./Configs/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
    ports:
      - "127.0.0.1:16686:16686"
    networks:
      - backend
  
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.91.0
    command: --config /etc/otelcol/otel-collector-config.yml
    volumes:
      - ./Configs/otel-collector-config.yml:/etc/otelcol/otel-collector-config.yml
    ports:
      - "127.0.0.1:4317:4317"
    networks:
      - backend
    depends_on:
      - jaeger
 
  prometheus:
    image: prom/prometheus:v2.48.1
    volumes:
      - ./Configs/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "127.0.0.1:9090:9090"
    networks:
      - backend
  
  loki:
    image: grafana/loki:2.9.3
    command: -config.file=/mnt/config/loki-config.yml
    volumes:
      - ./Configs/loki.yml:/mnt/config/loki-config.yml
    ports:
      - "127.0.0.1:3100:3100"
    networks:
      - backend
  
  grafana:
    image: grafana/grafana:10.2.3
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - ./Configs/grafana.ini:/etc/grafana/grafana.ini
      - ./Configs/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./Configs/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./Configs/dotnet-otel-dashboard.json:/etc/grafana/provisioning/dashboards/dotnet-otel-dashboard.json
      - ./Configs/logs-dashboard.json:/etc/grafana/provisioning/dashboards/logs-dashboard.json
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - backend

  postgres:
    image: postgres:16
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3.12-management
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
      - RABBITMQ_DEFAULT_VHOST=sample-dotnet-otel
    ports:
      - "127.0.0.1:5672:5672"
      - "127.0.0.1:15672:15672"
    networks:
      - backend

  proxy-service:
    build:
      dockerfile: SampleDotNetOTEL.ProxyService/Dockerfile
      context: .
    image: sample-dotnet-otel-proxy-service
    environment:
      - ServiceName=proxy-service
      - BusinessServiceBaseUrl=http://business-service-1;http://business-service-2;http://business-service-3;
      - OTEL_EXPORTER_JAEGER_AGENT_HOST=jaeger
      - OTEL_EXPORTER_JAEGER_AGENT_PORT=6831
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - ASPNETCORE_HTTP_PORTS=80
    ports:
      - "127.0.0.1:8080:80"
    networks:
      - backend
    depends_on:
      - rabbitmq
  
  business-service-1:
    build:
      dockerfile: SampleDotNetOTEL.BusinessService/Dockerfile
      context: .
    image: sample-dotnet-otel-business-service
    environment:
      - ServiceName=business-service-1
      - ConnectionStrings__Default=Server=postgres;Port=5432;Database=weather;User Id=postgres;Password=admin;
      - ErrorRate=0.95
      - OTEL_EXPORTER_JAEGER_AGENT_HOST=jaeger
      - OTEL_EXPORTER_JAEGER_AGENT_PORT=6831
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - ASPNETCORE_HTTP_PORTS=80
    ports:
      - "127.0.0.1:8081:80"
    networks:
      - backend
    depends_on:
      - postgres
      - rabbitmq
  
  business-service-2:
    build:
      dockerfile: SampleDotNetOTEL.BusinessService/Dockerfile
      context: .
    image: sample-dotnet-otel-business-service
    environment:
      - ServiceName=business-service-2
      - ConnectionStrings__Default=Server=postgres;Port=5432;Database=weather;User Id=postgres;Password=admin;
      - OTEL_EXPORTER_JAEGER_AGENT_HOST=jaeger
      - OTEL_EXPORTER_JAEGER_AGENT_PORT=6831
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - ASPNETCORE_HTTP_PORTS=80
    ports:
      - "127.0.0.1:8082:80"
    networks:
      - backend
    depends_on:
      - postgres
      - rabbitmq
  
  business-service-3:
    build:
      dockerfile: SampleDotNetOTEL.BusinessService/Dockerfile
      context: .
    image: sample-dotnet-otel-business-service
    environment:
      - ServiceName=business-service-3
      - ConnectionStrings__Default=Server=postgres;Port=5432;Database=weather;User Id=postgres;Password=admin;
      - OTEL_EXPORTER_JAEGER_AGENT_HOST=jaeger
      - OTEL_EXPORTER_JAEGER_AGENT_PORT=6831
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - ASPNETCORE_HTTP_PORTS=80
    ports:
      - "127.0.0.1:8083:80"
    networks:
      - backend
    depends_on:
      - postgres
      - rabbitmq
  
  spammer:
    image: alpine/curl:latest
    entrypoint:
      - /bin/sh
      - -c
      - |
        sleep 5
        while true; do
          curl -s "http://proxy-service/weather" || true
          curl -s "http://proxy-service/hello" || true
          curl -s "http://proxy-service/hello?name=John" || true
          curl -s -X POST -H "Content-Type: application/json" -d "{\"message\": \"This is a test message send thought RabbitMQ ($$(date))\"}" "http://proxy-service/messages" || true
          sleep 0.25
        done
    networks:
      - backend
    depends_on:
      - proxy-service
      - business-service-1
      - business-service-2
      - business-service-3

networks:
  backend:
